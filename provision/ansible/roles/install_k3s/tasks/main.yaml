- name: download_from_git
  containers.podman.podman_container:
    name: k3s-ansible-git
    state: started
    image: docker.io/alpine/git
    command: clone https://github.com/k3s-io/k3s-ansible
    volume:
      - /git

- name: Create temporary dir
  tempfile:
    state: directory
    prefix: "ansible.git."
    suffix: ".k3s"
  register: tempfile

# - name: copy_from_git
#   containers.podman.podman_container:
#     name: copy_k3s
#     state: started
#     image: docker.io/alpine
#     command: cp -r /git /download
#     rm: true
#     detach: false
#     userns: keep-id
#     volumes_from:
#       - k3s-ansible-git
#     volumes:
#       - "{{ tempfile.path }}:/download:Z"



#### WORK IN PROGRESS ##### consider building here? not ideal....
- name: Build a conainer formatted image
  containers.podman.podman_image:
    name: nginx
    path: "{{ inventory_dir }}/../.."
    # build:
      # file: "{{ inventory_dir }}/../../provision/ansible"
# podman build --file Containerfile . --tag registry:5000/ansible


- name: temp
  shell: podman image ls

# NOTE THAT CURRENT ISSUE IS THAT THE ansible USER doesn't see the locally build ansible container.

# https://www.suse.com/c/rancher_blog/deploying-k3s-with-ansible/
- name: install_k3s
  containers.podman.podman_container:
    name: install_k3s
    state: started
    image: ansible
    # command: ansible-playbook --help
    log_level: "debug"
    rm: true
    network: host
    detach: false
    userns: keep-id
    volumes_from:
      - k3s-ansible-git
    volumes:
      - "{{ tempfile.path }}:/build:Z"



# #!/usr/bin/env bash
# __THIS_PATH="$( cd -- "$(dirname "${BASH_SOURCE}")" >/dev/null 2>&1 || exit ; pwd -P )"
# __SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 || exit ; pwd -P )"
# __BASE_PATH="$( cd -- "${__SCRIPT_PATH}/../../.." >/dev/null 2>&1 || exit ; pwd -P )"
# cd ${__BASE_PATH}/provision/ansible

# # Add secrets
# REMOTE_USER=ansible
# [ $(podman secret inspect sshpubkey > /dev/null 2>&1 ; echo $?) == "0" ] || sudo cat /home/${REMOTE_USER}/.ssh/id_rsa.pub | podman secret create sshpubkey -  > /dev/null
# [ $(podman secret inspect sshkey > /dev/null 2>&1 ; echo $?) == "0" ] || sudo cat /home/${REMOTE_USER}/.ssh/id_rsa | podman secret create sshkey - > /dev/null

# ANSIBLE_TAGS="all, print_info, print_debug"
# ANSIBLE_TAGS="all"
# VERBOSITY="-v"
# # VERBOSITY=""

# podman run -it --rm \
#   -v${__BASE_PATH}:/localhost \
#   --network host \
#   --userns=keep-id \
#   --secret sshpubkey,target=/ssh/id_rsa.pub,mode=0600,uid=$(id -u) \
#   --secret sshkey,target=/ssh/id_rsa,mode=0600,uid=$(id -u) \
#   --env ANSIBLE_CONFIG="/localhost/provision/ansible/ansible.cfg" \
#   ansible ansible-playbook \
#   --ssh-extra-args='-o UserKnownHostsFile=/dev/null' \
#   --tags "${ANSIBLE_TAGS}" \
#   ${VERBOSITY} \
#  /localhost/provision/ansible/playbooks/provision.yaml
 
# # Remove secrets
# # [ $(podman secret inspect sshpubkey > /dev/null; echo $?) != "0" ] || podman secret rm sshpubkey > /dev/null
# # [ $(podman secret inspect sshkey > /dev/null; echo $?) != "0" ] || podman secret rm sshkey > /dev/null


# /localhost/provision/ansible/inventories/production/hosts.yaml