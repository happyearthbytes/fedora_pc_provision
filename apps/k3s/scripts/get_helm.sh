#!/usr/bin/env bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd ${SCRIPT_DIR}/..

PROJECT=
TMP_CHARTS=
YAML_BASE=
CHART_NAME=
NAMESPACE=
CHART_URL=

create_main_directory() {
    mkdir -p ${PROJECT}
    mkdir -p ${YAML_BASE}
    mkdir -p ${TMP_CHARTS}
    if [ ! -f ${PROJECT}/generate.sh ]; then

        cat <<EOF > ${PROJECT}/generate.sh
#!/usr/bin/env bash
# NOTE: This file is automatically generated!
SCRIPT_DIR=\$( cd -- "\$( dirname -- "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd \${SCRIPT_DIR}/..
CHART_SELECTOR=${CHART_SELECTOR}
CHART_NAME=${CHART_NAME}
CHART_URL=${CHART_URL}
./scripts/get_helm.sh \\
  \${CHART_SELECTOR} \\
  \${CHART_NAME} \\
  \${CHART_URL}
EOF

        chmod +x ${PROJECT}/generate.sh
    fi
}
add_repo() {
    local found=$(helm repo list | grep ${CHART_URL} | grep "^${CHART_SELECTOR} ")
    if [ "$found" == "" ]; then
        helm repo add ${CHART_SELECTOR} ${CHART_URL}
    fi
}
download_chart() {
    if [ ! -d ${TMP_CHARTS}/${CHART_NAME} ]; then
        helm fetch --untar \
        --untardir ${TMP_CHARTS} \
        ${CHART_SELECTOR}/${CHART_NAME}
    fi
}
create_template() {
    if [ ! -f ${PROJECT}/values.yaml ]; then
        cp ${TMP_CHARTS}/${CHART_NAME}/values.yaml ${PROJECT}/
        echo "NOTE: Customize ${CHART_NAME}/values.yaml"
        echo "NOTE: To continue: ./${CHART_NAME}/generate.sh"
        exit 0
    fi

    if [ -d ${PROJECT}/base ]; then
        echo "NOTE: Cleaning previous ${CHART_NAME}/base"
        rm -rf ${CHART_NAME}/base
    fi

    helm template \
      --include-crds \
      --output-dir ${YAML_BASE} \
      --values ${PROJECT}/values.yaml \
      --wait \
      ${CHART_NAME} \
      ${CHART_SELECTOR}/${CHART_NAME}

    mv ${YAML_BASE_TMP_PROJ}/templates/* ${YAML_BASE}
    rmdir ${YAML_BASE_TMP_PROJ}/templates
    mv ${YAML_BASE_TMP_PROJ}/crds ${YAML_BASE} > /dev/null 2>&1
    mv ${YAML_BASE_TMP_PROJ}/charts ${YAML_BASE} > /dev/null 2>&1
    echo "Removing: $(find ${YAML_BASE_TMP_PROJ})"
    rm -rf ${YAML_BASE_TMP_PROJ}
}
remove_charts() {
    echo "Removing: ${TMP_CHARTS}"
    rm -rf ${TMP_CHARTS}
}
kustomization_overlay()
{
    if [ ! -d ${PROJECT}/overlay ]; then
        mkdir -p ${PROJECT}/overlay
        # next we want to create two overlays as a starting point
        mkdir -p ${PROJECT}/overlay/common
        mkdir -p ${PROJECT}/overlay/example
        # then we want to copy the kustomize file to each overlay
        # in order to do that we start by creating the kustomize file
        
        cat <<EOF > ${PROJECT}/overlay/common/kustomization.yaml
bases:
- ../../base
# namespace: examples
# namePrefix: example-
# nameSuffix: "-k"
commonAnnotations:
  note: generated
commonLabels:
  generated: "true"
# images:
# - name: nginx
#   newName: my.image.registry/nginx
#   newTag: 1.4.0
# patchesStrategicMerge:
# - patch1.yaml
# - patch2.yaml
# patchesJson6902:
# - target:
#     group: apps
#     version: v1
#     kind: Deployment
#     name: my-nginx
#   path: patch3.yaml
# cat <<EOF > patch1.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: my-nginx
# spec:
#   replicas: 3
# EOF
# cat <<EOF > patch3.yaml
# - op: replace
#   path: /spec/replicas
#   value: 3
# EOF
# vars:
# - name: MY_SERVICE_NAME
#   objref:
#     kind: Service
#     name: my-nginx
#     apiVersion: v1
# https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/
EOF

        cp ${PROJECT}/overlay/common/kustomization.yaml ${PROJECT}/overlay/example/kustomization.yaml
        echo "IMPORTANT: Modify ${PROJECT}/overlay/*/kustomization.yaml"
    fi
}
kustomization_project()
{
    if [ ! -f ${PROJECT}/kustomization.yaml ]; then
        
        cat <<EOF > ${PROJECT}/kustomization.yaml
resources:
- overlay/common
#- overlay/example
EOF

    fi
}
kustomization_base()
{
    local location=${YAML_BASE}/kustomization.yaml
    # we want to dynamically do this.
    if [ ! -f ${location} ]; then    

        cat <<EOF > ${location}
############################################################################### 
#
#         !!!!!!!!!!! WARNING !!!!!!!!!!!
#
#         This file is automatically generated
#         and must be manually modified
#         before applying the kustomization.
#
#         Remove this message after it has been modified
#
############################################################################### 

#namespace: Modify_if_desired
#commonLabels: Modify_if_desired
#roles: Modify_if_desired
resources:
EOF

        # get all yaml files in this directory recursively
        find ${YAML_BASE} -name "*.yaml" ! -name "kustomization.yaml" -printf '- %P\n' >> ${location}
        echo "NOTE: Modify ${location}"
    fi
}
create_make_target () {
    local location=${PROJECT}/${CHART_NAME}.mak
    if [ ! -f ${location} ]; then
        cat <<EOF > ${location}
# ${CHART_NAME}
k3s-${CHART_NAME}-view: ## View ${CHART_NAME}
	@apps/k3s/${CHART_NAME}/view.sh
k3s-${CHART_NAME}-generate: # Generate ${CHART_NAME}
	@apps/k3s/${CHART_NAME}/generate.sh
k3s-${CHART_NAME}-restart: k3s-${CHART_NAME}-stop k3s-${CHART_NAME}-start # Restart ${CHART_NAME}
k3s-${CHART_NAME}-start: # Start ${CHART_NAME}
	@apps/k3s/${CHART_NAME}/start.sh
k3s-${CHART_NAME}-stop: # Stop ${CHART_NAME}
	@apps/k3s/${CHART_NAME}/stop.sh || true
EOF

# Add include to k3s.mak
# include apps/k3s/keycloak/keycloak.mak

    fi

    local k3s_mak="scripts/k3s.mak"
    local include_string="include apps/k3s/${location}"

    # check for string in mak
    local found=$(grep "${include_string}" ${k3s_mak} -q && echo "true")
    if [ ! "${found}" == "true" ]; then
        sed -i "1s|^|${include_string}\n|" ${k3s_mak}
    fi
}
start_sh() {
    local location=${PROJECT}/start.sh
    if [ ! -f ${location} ]; then

        cat <<EOF > ${location}
#!/usr/bin/env bash
_ROOT="../../.." _COMMON="scripts/libs/bash/common/common.sh"
. \$( cd -- "\$(dirname "\${BASH_SOURCE[0]}")/\${_ROOT}" >/dev/null 2>&1 || exit ; pwd -P )/\${_COMMON}
__THIS_PATH="\$( cd -- "\$(dirname "\${BASH_SOURCE[0]}")" >/dev/null 2>&1 || exit ; pwd -P )"
__print_header
__run_section \${__THIS_PATH}/generate.sh
__run_section kubectl apply -k \${__THIS_PATH}

EOF

        chmod +x ${location}
        echo "NOTE: To start: ./${PROJECT}/start.sh"
    fi
}
stop_sh() {
    local location=${PROJECT}/stop.sh
    if [ ! -f ${location} ]; then

        cat <<EOF > ${location}
#!/usr/bin/env bash
_ROOT="../../.." _COMMON="scripts/libs/bash/common/common.sh"
. \$( cd -- "\$(dirname "\${BASH_SOURCE[0]}")/\${_ROOT}" >/dev/null 2>&1 || exit ; pwd -P )/\${_COMMON}
__THIS_PATH="\$( cd -- "\$(dirname "\${BASH_SOURCE[0]}")" >/dev/null 2>&1 || exit ; pwd -P )"
__print_header
__run_section kubectl delete -k \${__THIS_PATH}
EOF

        chmod +x ${location}
        echo "NOTE: To stop: ./${PROJECT}/stop.sh"
    fi
}
view_sh() {
    local location=${PROJECT}/view.sh
    if [ ! -f ${location} ]; then

        cat <<EOF > ${location}
#!/usr/bin/env bash
echo "not implemented"
echo "xdg-open ..."
EOF
        chmod +x ${location}
        echo "NOTE: Update ${location}"
    fi
}
create_kustomization() {
    kustomization_project
    kustomization_base
    kustomization_overlay
    start_sh
    stop_sh
    view_sh
}
get_value()
{
  declare -n var_name=${1}
  var_example=$2
  var_value=$3
  if [[ -z $var_value ]]
  then
    read -p "Enter value for ${!var_name}. ${var_example}: " var_value
  fi

  declare ${!var_name}=$var_value
  echo $var_value
}
main() {
    # Assign Variables
    CHART_SELECTOR=$(get_value CHART_SELECTOR "e.g. traefik" $1 )
    CHART_NAME=$(get_value CHART_NAME "e.g. traefik" $2 )
    CHART_URL=$(get_value CHART_URL "e.g. https://traefik.github.io/charts" $3)
    PROJECT=${CHART_NAME}
    TMP_CHARTS=${PROJECT}/charts
    YAML_BASE=${PROJECT}/base
    YAML_BASE_TMP_PROJ=${YAML_BASE}/${CHART_NAME}
    
    # Run the functions
    create_main_directory
    add_repo
    create_make_target
    download_chart
    create_template
    create_kustomization
    remove_charts
}

main "$@"