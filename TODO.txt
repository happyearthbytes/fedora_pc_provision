[] update provision directory to use ansible to provision the PC - manual invokation
[] Update Makefile to call the provision scripts
[] Test Argo: https://argoproj.github.io/argo-workflows/quick-start/ ... compare with flux
[S] Add Elastic Search
[S] Add fluentd 
[S] Add Jaeger
[S] Add keycloak - lets encrypt - certbot
[S] Add Harbor
[S] Add Prometheus
[S] Add Grafana
[S] Artifactory
[] research k3sup - https://github.com/alexellis/k3sup
[] Research Rook
[] update gRPC
[] use Istio
[] Consider Rancher interface - https://vmguru.com/2021/04/how-to-install-rancher-on-k3s/
[] Use opentelemetry
[] Compare Thanos
[] SonarQube
[] Hashicorp Vault
[] Consider Harness
[] Consider Linkerd
[] Research Terraform
[] Research Calico / Tigera
[] Research Sonatype Nexus
[] Research Splunk
[] Compare Jenkins X, Team City, Argo CD, Travic CI, Jenkins, Circli CI, Gitlab, Flux
[] Consider Fedora CoreOS options for nodes
  https://carmine.dev/posts/kubernetesclusterfcos/
  https://dev.to/carminezacc/creating-a-kubernetes-cluster-with-fedora-coreos-36-j17
  https://access.redhat.com/documentation/en-us/openshift_container_platform/4.8/html/installing/installation-configuration
  https://docs.fedoraproject.org/en-US/fedora-coreos/sysconfig-network-configuration/
  https://www.techrepublic.com/article/how-to-deploy-coreos-as-a-virtual-machine/
[] Consider using Butane / Ignition for provisioning
[] add rancher web ui
[] Create a plantuml logger python package that classes can implement or inherit from -
  e.g. user = puml(); core = puml(); service = puml()
    user.create(core);
    core.activate();
    core.do(to=service, "Send Message")
    service.act("Proces data")
    service.do(to=core, "Done")
    core.deactivate();
